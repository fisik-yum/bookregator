// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getReviewsByOLID = `-- name: GetReviewsByOLID :many
SELECT review_id, olid, source, external_id, rating, text FROM reviews WHERE olid = ?
`

func (q *Queries) GetReviewsByOLID(ctx context.Context, olid string) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByOLID, olid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Olid,
			&i.Source,
			&i.ExternalID,
			&i.Rating,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertISBN = `-- name: InsertISBN :exec
INSERT INTO isbns (isbn, olid) VALUES (?, ?)
`

type InsertISBNParams struct {
	Isbn string `json:"isbn"`
	Olid string `json:"olid"`
}

func (q *Queries) InsertISBN(ctx context.Context, arg InsertISBNParams) error {
	_, err := q.db.ExecContext(ctx, insertISBN, arg.Isbn, arg.Olid)
	return err
}

const insertReview = `-- name: InsertReview :exec
INSERT INTO reviews (review_id, olid, source, external_id, rating, text) values (?, ?, ?, ?, ?, ?)
`

type InsertReviewParams struct {
	ReviewID   int64           `json:"review_id"`
	Olid       string          `json:"olid"`
	Source     string          `json:"source"`
	ExternalID string          `json:"external_id"`
	Rating     sql.NullFloat64 `json:"rating"`
	Text       sql.NullString  `json:"text"`
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) error {
	_, err := q.db.ExecContext(ctx, insertReview,
		arg.ReviewID,
		arg.Olid,
		arg.Source,
		arg.ExternalID,
		arg.Rating,
		arg.Text,
	)
	return err
}
