package db

import (
	"database/sql"
	"log"
	"time"

	"git.sr.ht/~timharek/openlibrary-go"
	_ "github.com/mattn/go-sqlite3"
	gisbn "github.com/moraes/isbn"
)

var db *sql.DB
var olib openlibrary.Client

func init() {
	olib = openlibrary.New()
	// TODO: read from config file
	// HACK: open up without any proper credentials for now
	var err error
	db, err = sql.Open("sqlite3", "test.sqlite3")
	if err != nil {
		log.Fatal(err)
	}
	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}
	// See "Important settings" section.
	db.SetConnMaxLifetime(time.Minute * 3)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)
}

// route an ISBN to an OLID, and add it to the database
func RouteISBNtoOLID(isbn string) bool {
	if !gisbn.Validate(isbn) {
		log.Printf("Invalid ISBN: %s", isbn)
		return false
	}
	if len(isbn) < 11 && len(isbn) > 8 {
		isbn, _ = gisbn.To13(isbn)
	}
	//
	book, err := olib.Book.ByISBN(isbn)
	if err != nil {
		log.Printf("Book %s lookup error: %s", isbn, err)
		return false
	}
	olid := book.Key // HACK: Assume that this is the correct OLID for the works
	if olid == "" {
		log.Printf("ISBN %s has no corresponding OLID", isbn)
		return false
	}

	_, err = db.Exec(`
        INSERT OR IGNORE INTO isbns (isbn, olid)
        VALUES (?, ?)
    `, isbn, olid)

	if err != nil {
		log.Println("DB insert failed:", err)
		return false
	}

	log.Printf("DB insert suceeded: %s", olid)
	return true
}
