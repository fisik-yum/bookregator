// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const getNReviewsByOLID = `-- name: GetNReviewsByOLID :many
SELECT review_id, olid, source, external_id, username, rating, text FROM reviews WHERE olid = ? ORDER BY RANDOM() LIMIT ?
`

type GetNReviewsByOLIDParams struct {
	Olid  string `json:"olid"`
	Limit int64  `json:"limit"`
}

func (q *Queries) GetNReviewsByOLID(ctx context.Context, arg GetNReviewsByOLIDParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getNReviewsByOLID, arg.Olid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Olid,
			&i.Source,
			&i.ExternalID,
			&i.Username,
			&i.Rating,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOLIDFromISBN = `-- name: GetOLIDFromISBN :one
SELECT olid FROM isbns WHERE isbn = ? LIMIT 1
`

func (q *Queries) GetOLIDFromISBN(ctx context.Context, isbn string) (string, error) {
	row := q.db.QueryRowContext(ctx, getOLIDFromISBN, isbn)
	var olid string
	err := row.Scan(&olid)
	return olid, err
}

const insertISBN = `-- name: InsertISBN :exec
INSERT INTO isbns (isbn, olid) VALUES (?, ?)
`

type InsertISBNParams struct {
	Isbn string `json:"isbn"`
	Olid string `json:"olid"`
}

func (q *Queries) InsertISBN(ctx context.Context, arg InsertISBNParams) error {
	_, err := q.db.ExecContext(ctx, insertISBN, arg.Isbn, arg.Olid)
	return err
}

const insertReview = `-- name: InsertReview :exec
INSERT INTO reviews ( olid, source, external_id, username, rating, text) values (?, ?, ?, ?, ?, ?)
`

type InsertReviewParams struct {
	Olid       string   `json:"olid"`
	Source     string   `json:"source"`
	ExternalID string   `json:"external_id"`
	Username   string   `json:"username"`
	Rating     *float64 `json:"rating"`
	Text       *string  `json:"text"`
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) error {
	_, err := q.db.ExecContext(ctx, insertReview,
		arg.Olid,
		arg.Source,
		arg.ExternalID,
		arg.Username,
		arg.Rating,
		arg.Text,
	)
	return err
}

const insertWork = `-- name: InsertWork :exec
INSERT INTO works (olid, title, author, description, published_year) values (?, ?, ?, ?, ?)
`

type InsertWorkParams struct {
	Olid          string  `json:"olid"`
	Title         string  `json:"title"`
	Author        *string `json:"author"`
	Description   *string `json:"description"`
	PublishedYear *int64  `json:"published_year"`
}

func (q *Queries) InsertWork(ctx context.Context, arg InsertWorkParams) error {
	_, err := q.db.ExecContext(ctx, insertWork,
		arg.Olid,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.PublishedYear,
	)
	return err
}
